---
- name: Setup virtual environment and install amazon.aws collection
  hosts: myserver
  gather_facts: false

  # tasks:
    # - name: Ensure python3-venv is installed
    #   apt:
    #     name: python3-venv
    #     state: present

    # - name: Create Python virtual environment
    #   ansible.builtin.shell: python3 -m venv /home/tayo/myvenv
    #   args:
    #     creates: /home/tayo/myvenv/bin/activate

    # - name: Install Ansible in the virtual environment
    #   ansible.builtin.shell: |
    #     source /home/tayo/myvenv/bin/activate
    #     pip install ansible
    #   args:
    #     executable: /bin/bash

    # - name: Install boto3 and botocore in the virtual environment
    #   ansible.builtin.shell: |
    #     source /home/tayo/myvenv/bin/activate
    #     pip install boto3 botocore
    #   args:
    #     executable: /bin/bash

    # - name: Set ansible_python_interpreter to use virtual environment
    #   set_fact:
    #     ansible_python_interpreter: /home/tayo/myvenv/bin/python

    # - name: Install amazon.aws collection
    #   ansible.builtin.shell: |
    #     source /home/tayo/myvenv/bin/activate
    #     ansible-galaxy collection install amazon.aws
    #   args:
    #     executable: /bin/bash

- name: Setup ec2 instance
  hosts: myserver
  gather_facts: False

  tasks:
    - name: Check if key pair exists
      amazon.aws.ec2_key_info:
        names:
          - mykey
        region: "{{ region }}"
      register: existing_key

    - name: Create key pair if it doesn't exist
      ec2_key:
        name: mykey
        region: "{{ region }}"
      register: keyout
      when: existing_key.keypairs | length == 0

    - name: Save private key to file (optional)
      copy:
        content: "{{ keyout.key.private_key }}"
        dest: ./mykey.pem
      when: keyout.changed

    - name: Set file permissions for the private key
      file:
        path: ./mykey.pem
        mode: '0400'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: keyout.changed
    
    - name: Engure .ignore exists
      file:
        path: ./.gitignore
        state: touch

    - name: Ensure the mykey.pem file is ignored in .gitignore
      lineinfile:
        path: ./.gitignore
        line: mykey.pem
        create: yes

    - name: Check if security group exists
      amazon.aws.ec2_group_info:
        filters:
          group-name: "{{ security_group }}"
        region: "{{ region }}"
      register: existing_sg

    - name: Create a security group if it doesn't exist
      ec2_group:
        name: "{{ security_group }}"
        description: Jenkins and Docker SG
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 10.0.0.0/8
          - proto: tcp
            from_port: 3000
            to_port: 3000
            cidr_ip: 0.0.0.0/0
        # rules_egress:
        #   - proto: tcp
        #     from_port: 80
        #     to_port: 80
        #     cidr_ip: 0.0.0.0/0
      when: existing_sg.security_groups | length == 0

    - name: Check if EC2 instance already exists
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": "{{ instance_name }}"
          instance-state-name: ["running", "stopped"]
        region: "{{ region }}"
      register: existing_ec2

    - name: Launch EC2 instance if it doesn't exist
      ec2_instance:
        name: "{{ instance_name }}"
        key_name: "{{ key_name }}"
        # vpc_subnet_id: subnet-5ca1ab1e
        instance_type: "{{ instance_type }}"
        security_group: "{{ security_group }}"
        # network:
        #   assign_public_ip: true
        image_id: "{{ ami }}"
        region: "{{ region }}"
        exact_count: 1
        tags:
          Name: "{{ instance_name }}"
        wait: yes
        wait_timeout: 500
        iam_instance_profile: "apex-secrets"  # Attach the IAM role here
      register: ec2
      when: existing_ec2.instances | length == 0

    - name: Capture instance details
      set_fact:
        instance_details: "{{ existing_ec2.instances[0] if (existing_ec2.instances | length > 0) else ec2.instances[0] }}"

    - name: Add new EC2 instance to the host group
      add_host:
        hostname: "{{ instance_details.public_dns_name }}"  # This uses the public DNS name of the instance
        ansible_ssh_private_key_file: ./mykey.pem
        ansible_user: ubuntu 
        groupname: GoApp_server

    # - name: Wait for SSH to come up
    #   wait_for:
    #     host: "{{ instance_details.public_dns_name }}"
    #     port: 22
    #     delay: 60
    #     timeout: 320
    #     state: started
    #   # with_items: "{{ ec2.instances }}"

- name: Provision ec2 Instance and Deploy Go
  hosts: GoApp_server
  become: yes
  gather_facts: false

  tasks:
    - name: Install dependencies
      apt:
        name:
          - git
          - golang-go
        state: present
        update_cache: yes

    - name: Check for local changes in repo
      command: git status --porcelain
      args:
        chdir: /home/ubuntu/apex
      register: git_status

    - name: Pull source code if there's changes from GitHub
      git:
        repo: 'https://github.com/Oluty-1/apex-network_new.git'
        dest: /home/ubuntu/apex
      when: git_status.stdout == ''

    - name: Change directory to the project directory
      ansible.builtin.shell: cd /home/ubuntu/apex

    - name: Retrieve secrets from AWS Secrets Manager
      set_fact:
        retrieved_secrets: "{{ lookup('amazon.aws.aws_secret', apex_secrets, region=region) | from_json }}"

    - name: Print retrieved secrets
      debug:
        var: retrieved_secrets

    - name: Set variables from AWS Secrets Manager
      set_fact:
        port: "{{ retrieved_secrets.PORT }}"
        db_url: "{{ retrieved_secrets.DB_URL }}"

    - name: Set environment variables for the application
      ansible.builtin.lineinfile:
        path: /home/ubuntu/apex/.env
        line: "{{ item }}"
      loop:
        - "PORT={{ port }}"
        - "DB_URL={{ db_url }}"

    - name: Install Go dependencies
      command: go mod download
      args:
        chdir: /home/ubuntu/apex/src

    - name: Build Go application
      command: go build -o apex-app
      args:
        chdir: /home/ubuntu/apex/src

    # - name: Run Go application
    #   command: ./apex-app apex_network_api
    #   args:
    #     chdir: /home/ubuntu/apex/src


    - name: Set up systemd service
      template:
        src: apex-app.service.j2
        dest: /etc/systemd/system/apex-app.service
      notify: Restart apex-app

    - name: Reload systemd daemon
      command: systemctl daemon-reload

    - name: Ensure apex-app is running
      systemd:
        name: apex-app
        state: started
        enabled: yes

  handlers:
    - name: Restart apex-app
      systemd:
        name: apex-app
        state: restarted

    # - name: Install Docker Compose
    #   ansible.builtin.shell: |
    #     curl -L "https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    #     chmod +x /usr/local/bin/docker-compose
    #   args:
    #     executable: /bin/bash

    # - name: Run docker-compose up
    #   ansible.builtin.shell: docker-compose up -d
    #   args:
    #     chdir: /home/apex  # Set the working directory

# - name: Remove local key files for security
#   hosts: localhost
#   gather_facts: false
#   tasks:
#     - name: Remove local key files for security
#       file:
#         path: ./mykey.pem
#         state: absent